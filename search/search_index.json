{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#notedx-python-sdk","title":"NoteDx Python SDK","text":"<p>The NoteDx Python SDK provides a simple and intuitive way to interact with the NoteDx API for medical note generation and management. Fully compliant to handling of healthcare data in the US and Canada including Quebec.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Secure Authentication: API key for usage and Firebase authentication for your account management.</li> <li>\ud83d\udcdd Note Generation: Convert audio recordings to structured medical notes</li> <li>\ud83d\udd04 Real-time Status: Track note generation progress</li> <li>\ud83c\udfaf Template Support: Multiple medical note templates and customization</li> <li>\ud83c\udf10 Webhook Integration: Real-time event notifications</li> <li>\ud83d\udd11 API Key Management: Create and manage API keys</li> <li>\ud83d\udc65 Account Management: Handle account settings and status</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install notedx-sdk\n</code></pre> <pre><code>from notedx_sdk import NoteDxClient\n\n# Initialize with API key\nclient = NoteDxClient(api_key=\"your-api-key\")\n\n# Generate a note from audio\nresponse = client.notes.process_audio(\n    file_path=\"recording.mp3\",\n    template=\"primaryCare\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\"\n)\n\n# Get the job ID\njob_id = response[\"job_id\"]\n\n# Check status\nstatus = client.notes.fetch_status(job_id)\nif status[\"status\"] == \"completed\":\n    # Get the generated note\n    note = client.notes.fetch_note(job_id)\n    print(note[\"note\"])\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"<p>The SDK is organized into several managers for different aspects of the API:</p> <ul> <li>Client: Main client configuration and setup</li> <li>Note Generation: Audio processing and note generation</li> <li>Account Management: Account settings and lifecycle</li> <li>API Key Management: API key operations</li> <li>Webhook Management: Webhook configuration</li> </ul>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>Check out our Getting Started guide</li> <li>See Examples for common use cases</li> <li>Request Beta Access here</li> <li>Contact support at team@notedxai.com </li> </ul>"},{"location":"billing/","title":"Billing &amp; Pricing","text":""},{"location":"billing/#free-trial","title":"Free Trial","text":"<p>Every new account starts with:</p> <ul> <li>100 free jobs with a live API key</li> <li>Unlimited jobs with sandbox API keys (for testing)</li> <li>Full access to all features during trial</li> </ul>"},{"location":"billing/#pricing-model","title":"Pricing Model","text":"<p>After the free trial, we use a tiered token pricing model:</p>"},{"location":"billing/#token-pricing-tiers","title":"Token Pricing Tiers","text":"Tier Token Range Price per 1,000 tokens 1 1 - 500,000 $0.11 2 500,001 - 2,500,000 $0.095 3 2,500,001 - 10,000,000 $0.08 4 10,000,001 - 50,000,000 $0.065 5 50,000,001+ $0.05"},{"location":"billing/#how-pricing-works","title":"How Pricing Works","text":"<ul> <li>Pricing is based on the total number of tokens processed</li> <li>Each tier's rate applies only to tokens within that tier's range</li> <li>Tokens are counted for both transcription and note generation</li> <li>Billing is calculated monthly based on total token usage</li> </ul> <p>Example: If you process 600,000 tokens in a month:</p> <ul> <li>First 500,000 tokens: $0.11 per 1,000 = $55</li> <li>Next 100,000 tokens: $0.095 per 1,000 = $9.50</li> <li>Total monthly cost = $64.50</li> </ul>"},{"location":"billing/#account-status","title":"Account Status","text":"<p>Your account can be in one of these states:</p> <p>Trial</p> <ul> <li>Access to 100 free jobs</li> <li>All features available</li> <li>No credit card required</li> </ul> <p>Active</p> <ul> <li>Full access to all features</li> <li>Valid subscription</li> <li>Pay-as-you-go billing</li> </ul> <p>Pending Subscription</p> <ul> <li>Trial completed</li> <li>Payment required to continue</li> <li>Access to view past jobs only and sandbox keys</li> </ul> <p>Inactive</p> <ul> <li>Account setup incomplete</li> <li>No access to API</li> <li>Use reactivate account upon fee payments or contact support to reactivate</li> </ul>"},{"location":"billing/#definitions","title":"Definitions","text":"<ul> <li>Job: A single audio file processing operation including a note generation (or a regeneration)</li> <li>Tokens: Units of text processing in transcription and note generation (output only)</li> <li>Live API Key: Used for production, counts towards billing</li> <li>Sandbox API Key: Used for testing, no billing impact</li> </ul>"},{"location":"billing/#token-usage-examples","title":"Token Usage Examples","text":""},{"location":"billing/#short-visit-note","title":"Short Visit Note","text":"<ul> <li>Average dictation + note \u2248 900 tokens total</li> <li>Cost: 900 tokens \u00d7 $0.11/1000 = $0.099</li> </ul>"},{"location":"billing/#long-consultation","title":"Long Consultation","text":"<ul> <li>Average dictation + note \u2248 2,100 tokens total</li> <li>Cost: 2,100 tokens \u00d7 $0.11/1000 = $0.231</li> </ul>"},{"location":"billing/#monthly-usage-example","title":"Monthly Usage Example","text":"<p>Typical usage of power users (15 consultations/day, 5 days/week):</p> <ul> <li>240 short visits: 216,000 tokens (900 \u00d7 240)</li> <li>60 long consultations: 126,000 tokens (2,100 \u00d7 60)</li> <li>Total monthly tokens: 342,000 tokens</li> <li>Cost: 342,000 tokens \u00d7 $0.11/1000 = $37.62/month (Tier 1)</li> </ul>"},{"location":"billing/#check-your-usage-billing","title":"Check Your Usage &amp; Billing","text":"<ul> <li>Use the SDK: <code>client.usage.get()</code> to retrieve usage &amp; cost breakdown</li> <li>Or call the endpoint <code>GET /usage</code> with your Bearer token or API key</li> </ul> <p>Next step: Account Management</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the NoteDx SDK will be documented in this file.</p>"},{"location":"changelog/#015-2025-01-17","title":"[0.1.5] - 2025-01-17","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Self-service account creation via <code>NoteDxClient.create_account()</code></li> <li>Automatic API key setup during account creation</li> <li>Support for combined authentication (email/password + API key)</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Simplified authentication flow</li> <li>Improved error handling for authentication</li> <li>Updated documentation to reflect self-service account creation</li> <li>Removed beta access request requirement</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Authentication retry logic for expired tokens</li> <li>Token refresh handling during method changes</li> <li>API key validation in request headers</li> </ul>"},{"location":"changelog/#014-2025-01-14","title":"[0.1.4] - 2025-01-14","text":""},{"location":"changelog/#added_1","title":"Added","text":""},{"location":"changelog/#documentation-style","title":"Documentation style","text":"<p>Introduction of the <code>documentation_style</code> parameter to allow for more flexibility in the note generation process. You can now choose between <code>soap</code> and <code>problemBased</code> documentation styles. Which structures the note based on these 2 very popular formats. When left empty, the default documentation style of the template is used, which is a structures classical style.</p>"},{"location":"changelog/#pharmacy-support","title":"Pharmacy support","text":"<p>Introduction of the <code>pharmacy</code> template! This is a perfectly tailored template for pharmacists to generate notes for their patients after a consultation. It was codeveloped with pharmacists.</p> <ul> <li>Updated documentation</li> <li>Updated README</li> </ul>"},{"location":"changelog/#013-2025-01-13","title":"[0.1.3] - 2025-01-13","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Bug fix for the <code>NoteManager</code> class</li> </ul>"},{"location":"changelog/#012-2025-01-11","title":"[0.1.2] - 2025-01-11","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Initial release</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Common use cases and examples for the NoteDx SDK.</p>"},{"location":"examples/#note-generation","title":"Note Generation","text":""},{"location":"examples/#basic-note-generation","title":"Basic Note Generation","text":"<pre><code>from notedx_sdk import NoteDxClient\nimport time\n\nclient = NoteDxClient(api_key=\"your-api-key\")\n\n# Process audio file\nresponse = client.notes.process_audio(\n    file_path=\"recording.mp3\",\n    template=\"primaryCare\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\",\n    lang=\"en\"\n)\n\n# Get job ID\njob_id = response[\"job_id\"]\n\n# Check status until complete - Highly recommended to use the webhook to get status updates!\nwhile True:\n    status = client.notes.fetch_status(job_id)\n    if status[\"status\"] == \"completed\":\n        note = client.notes.fetch_note(job_id)\n        print(note[\"note\"])\n        break\n    elif status[\"status\"] == \"error\":\n        print(f\"Error: {status['message']}\")\n        break\n    time.sleep(5)\n</code></pre>"},{"location":"examples/#word-for-word-transcription","title":"Word-for-Word Transcription","text":"<pre><code># Simple transcription without note generation\nresponse = client.notes.process_audio(\n    file_path=\"dictation.mp3\",\n    template=\"wfw\",\n    lang=\"en\"\n)\n\n# Get transcript when ready\njob_id = response[\"job_id\"]\nstatus = client.notes.fetch_status(job_id)\nif status[\"status\"] == \"completed\":\n    transcript = client.notes.fetch_transcript(job_id)\n    print(transcript[\"transcript\"])\n</code></pre>"},{"location":"examples/#note-with-custom-template","title":"Note with Custom Template","text":"<pre><code># Use custom template and context\nresponse = client.notes.process_audio(\n    file_path=\"visit.mp3\",\n    template=\"primaryCare\",\n    visit_type=\"followUp\",\n    recording_type=\"dictation\",\n    lang=\"en\",\n    custom={\n        \"context\": \"\"\"\n            Previous visit on 2024-01-01\n            Current medications: Medication A, Medication B\n            Allergies: Penicillin\n        \"\"\",\n        \"template\": \"\"\"\n        SUBJECTIVE:\n        Some custom intruction for the LLM to follow here about what to include, exclude, how to format, etc.\n\n        OBJECTIVE:\n        Some custom intruction for the LLM to follow here about what to include, exclude, how to format, etc.\n\n        ASSESSMENT:\n        Some custom intruction for the LLM to follow here about what to include, exclude, how to format, etc.\n\n        PLAN:\n        Some custom intruction for the LLM to follow here about what to include, exclude, how to format, etc.\n        \"\"\"\n    }\n)\n</code></pre>"},{"location":"examples/#note-translation","title":"Note Translation","text":"<pre><code># Generate note in English\nresponse = client.notes.process_audio(\n    file_path=\"visit.mp3\",\n    template=\"primaryCare\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\",\n    lang=\"en\"\n)\n\n# Later, translate to French ( or change the template, pass new context of template with the custom parameter, etc...)\ntranslated = client.notes.regenerate_note(\n    job_id=response[\"job_id\"],\n    output_language=\"fr\"\n)\n</code></pre>"},{"location":"examples/#account-management","title":"Account Management","text":""},{"location":"examples/#complete-account-setup","title":"Complete Account Setup","text":"<pre><code>from notedx_sdk import NoteDxClient\n\n# Initialize with Firebase auth for account management.\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Update account info\nclient.account.update_account(\n    company_name=\"Medical Center Inc.\",\n    contact_email=\"admin@medical.com\",\n    phone_number=\"+1234567890\",\n    address=\"123 Medical Center Dr\"\n)\n\n# Create API key\nkey = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\n        \"environment\": \"production\",\n        \"department\": \"radiology\"\n    }\n)\n\n# Set up webhooks\nclient.webhooks.update_webhook_settings(\n    webhook_prod=\"https://api.medical.com/notedx/webhook\",\n    webhook_dev=\"https://dev-api.medical.com/notedx/webhook\"\n)\n</code></pre>"},{"location":"examples/#account-lifecycle","title":"Account Lifecycle","text":"<pre><code># Cancel account\nclient.account.cancel_account()\n\n# Later, reactivate account\nclient.account.reactivate_account()\n\n# Create new API key after reactivation\nnew_key = client.keys.create_api_key(key_type=\"live\")\n</code></pre>"},{"location":"examples/#api-key-management","title":"API Key Management","text":""},{"location":"examples/#key-rotation","title":"Key Rotation","text":"<pre><code># List current keys\ncurrent_keys = client.keys.list_api_keys()\n\n# Create new key\nnew_key = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\"rotated_at\": \"2024-01-23\"}\n)\n\n# Deactivate old keys\nfor key in current_keys:\n    if key[\"type\"] == \"live\":\n        client.keys.update_status(\n            api_key=key[\"key\"],\n            status=\"inactive\"\n        )\n</code></pre>"},{"location":"examples/#environment-specific-keys","title":"Environment-Specific Keys","text":"<pre><code># Development key\ndev_key = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\n        \"environment\": \"development\",\n        \"rate_limit\": \"low\"\n    }\n)\n\n# Staging key\nstaging_key = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\n        \"environment\": \"staging\",\n        \"rate_limit\": \"medium\"\n    }\n)\n\n# Production key\nprod_key = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\n        \"environment\": \"production\",\n        \"rate_limit\": \"high\"\n    }\n)\n</code></pre>"},{"location":"examples/#webhook-management","title":"Webhook Management","text":""},{"location":"examples/#development-setup","title":"Development Setup","text":"<pre><code># Set up development webhook (can be HTTP or HTTPS)\nclient.webhooks.update_webhook_settings(\n    webhook_dev=\"https://dev-api.medical.com/notedx/webhook\" \n)\n\n# Test with sandbox key\nsandbox_key = client.keys.create_api_key(key_type=\"sandbox\")\ntest_client = NoteDxClient(api_key=sandbox_key[\"api_key\"])\n\n# Process test audio\ntest_client.notes.process_audio(\n    file_path=\"test.mp3\",\n    template=\"wfw\",\n    lang=\"en\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\"\n)\n</code></pre>"},{"location":"examples/#production-setup","title":"Production Setup","text":"<pre><code># Set up production webhook with backup\nclient.webhooks.update_webhook_settings(\n    webhook_prod=\"https://api.example.com/webhook\",\n    webhook_dev=\"https://backup.example.com/webhook\"\n)\n\n# Create production key\nprod_key = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\"webhook\": \"https://api.example.com/webhook\"}\n)\n</code></pre>"},{"location":"examples/#error-handling","title":"Error Handling","text":""},{"location":"examples/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>from notedx_sdk.exceptions import (\n    AuthenticationError,\n    AuthorizationError,\n    ValidationError,\n    NetworkError,\n    JobError,\n    NotFoundError,\n    PaymentRequiredError\n)\n\ntry:\n    # Attempt operation\n    response = client.notes.process_audio(...)\n\nexcept AuthenticationError:\n    # Handle authentication issues\n    print(\"Invalid API key or token expired\")\n    # Refresh token or get new API key\n\nexcept AuthorizationError:\n    # Handle permission issues\n    print(\"Not authorized for this operation\")\n    # Check account status and permissions\n\nexcept ValidationError as e:\n    # Handle invalid parameters\n    print(f\"Invalid parameters: {e}\")\n    # Fix parameters and retry\n\nexcept NetworkError as e:\n    # Handle connection issues\n    print(f\"Connection error: {e}\")\n    # Implement exponential backoff retry\n\nexcept JobError as e:\n    # Handle job processing errors\n    print(f\"Job failed: {e}\")\n    # Check error details and retry if appropriate\n\nexcept NotFoundError:\n    # Handle missing resources\n    print(\"Resource not found\")\n    # Verify resource exists\n\nexcept PaymentRequiredError:\n    # Handle billing issues\n    print(\"Account payment required\")\n    # Update billing information\n\nexcept Exception as e:\n    # Handle unexpected errors\n    print(f\"Unexpected error: {e}\")\n    # Log error and contact support\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with the NoteDx Python SDK.</p> <p>Base URL if using HTTP requests: <pre><code>https://api.notedx.io/v1\n</code></pre></p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install the SDK using pip:</p> <pre><code>pip install notedx-sdk\n</code></pre> <p>Or using Poetry:</p> <pre><code>poetry add notedx-sdk\n</code></pre>"},{"location":"getting-started/#create-an-account","title":"Create an Account","text":"<p>First, create your NoteDx account:</p> <pre><code>from notedx_sdk import NoteDxClient\n\n# Create a new account\nresult = NoteDxClient.create_account(\n    email=\"user@example.com\",\n    password=\"secure-password\",  # Must be at least 8 characters\n    company_name=\"Your Company Name\"\n)\n\n# Save your API keys\nsandbox_key = result['sandbox_api_key']  # For testing (unlimited usage)\nlive_key = result['live_api_key']    # For production (includes 100 free jobs)\n</code></pre> <p>After creating your account:</p> <ol> <li>Check your email for the verification link</li> <li>Click the verification link to activate your account</li> <li>You can now use either your API keys or email/password to authenticate</li> </ol>"},{"location":"getting-started/#authentication","title":"Authentication","text":"<p>The SDK supports two authentication methods. (But you can always use <code>client.set_api_key(api_key)</code> to set the api key for any operation)</p>"},{"location":"getting-started/#api-key-authentication-for-note-related-operations","title":"API Key Authentication (For note related operations)","text":"<pre><code>from notedx_sdk import NoteDxClient\n\n# Use your live API key for production\nclient = NoteDxClient(api_key=live_key)\n\n# Or use sandbox key for testing\nclient = NoteDxClient(api_key=sandbox_key)\n</code></pre>"},{"location":"getting-started/#emailpassword-authentication","title":"Email/Password Authentication","text":"<p>For account management and API key operations: You can add the api key to the client as well.</p> <pre><code>client = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\",\n    api_key=\"lk-xxxxxxxxxxxx\" \n)\n</code></pre>"},{"location":"getting-started/#quick-examples","title":"Quick Examples","text":""},{"location":"getting-started/#generate-a-medical-note","title":"Generate a Medical Note","text":"<pre><code># Initialize client with your API key\nclient = NoteDxClient(api_key=live_key)\n\n# Process audio file\nresponse = client.notes.process_audio(\n    file_path=\"visit_recording.mp3\",\n    template=\"primaryCare\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\",\n    lang=\"en\"\n)\n\n# Get job ID\njob_id = response[\"job_id\"]\n\n# Polling for job completion, but it is way better to use the webhooks!\nwhile True:\n    status = client.notes.fetch_status(job_id)\n    if status[\"status\"] == \"completed\":\n        # Get the note\n        note = client.notes.fetch_note(job_id)\n        print(note[\"note\"])\n        break\n    elif status[\"status\"] == \"error\":\n        print(f\"Error: {status['message']}\")\n        break\n    time.sleep(5)  # Wait 5 seconds before checking again\n</code></pre>"},{"location":"getting-started/#manage-account-settings","title":"Manage Account Settings","text":"<pre><code># Initialize with email/password\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Get account info\naccount_info = client.account.get_account()\nprint(f\"Company: {account_info['company_name']}\")\n\n# Update settings\nclient.account.update_account(\n    company_name=\"New Company Name\",\n    contact_email=\"new@example.com\"\n)\n</code></pre>"},{"location":"getting-started/#manage-api-keys","title":"Manage API Keys","text":"<pre><code># Create a new live API key\nkey = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\"environment\": \"production\"}\n)\nprint(f\"New API key: {key['api_key']}\")\n\n# List all keys\nkeys = client.keys.list_api_keys()\nfor key in keys:\n    print(f\"Key: {key['key']}, Type: {key['type']}\")\n</code></pre>"},{"location":"getting-started/#configure-webhooks","title":"Configure Webhooks","text":"<pre><code># Set up webhooks for notifications\nclient.webhooks.update_webhook_settings(\n    webhook_dev=\"http://localhost:3000/webhook\",\n    webhook_prod=\"https://api.example.com/webhook\"\n)\n</code></pre>"},{"location":"getting-started/#error-handling","title":"Error Handling","text":"<p>The SDK provides detailed error classes for better error handling:</p> <pre><code>from notedx_sdk.exceptions import (\n    AuthenticationError,\n    AuthorizationError,\n    PaymentRequiredError,\n    InactiveAccountError,\n    ValidationError,\n    NetworkError,\n    JobError\n)\n\ntry:\n    response = client.notes.process_audio(...)\nexcept AuthenticationError:\n    print(\"Invalid API key or missing user\")\nexcept PaymentRequiredError as e:\n    if \"Free trial jobs depleted\" in str(e):\n        print(\"Free trial (100 jobs) depleted. Please subscribe.\")\n    else:\n        print(f\"Payment required: {e}\")\nexcept InactiveAccountError:\n    print(\"Account is inactive. Please complete setup.\")\nexcept ValidationError as e:\n    print(f\"Invalid parameters: {e}\")\nexcept NetworkError as e:\n    print(f\"Connection error: {e}\")\nexcept JobError as e:\n    print(f\"Job failed: {e}\")\n</code></pre>"},{"location":"getting-started/#free-trial-limits","title":"Free Trial Limits","text":"<ul> <li>Each account starts with 100 free jobs with a live API key</li> <li>After 100 jobs, payment is required to continue</li> <li>Sandbox API keys have unlimited usage for testing</li> </ul>"},{"location":"getting-started/#account-status","title":"Account Status","text":"<p>Your account can be in one of these states:</p> <ul> <li><code>active</code>: Full access to all features</li> <li><code>trial</code>: Access to 100 free jobs</li> <li><code>pending_subscription</code>: Payment required to activate</li> <li><code>inactive</code>: Account setup incomplete</li> </ul> <p>For billing details, see Billing &amp; Pricing.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation</li> <li>See Examples for more use cases</li> <li>Contact support at team@notedxai.com for help </li> </ul>"},{"location":"reference/account/","title":"Account Management","text":"<p>The <code>AccountManager</code> class handles all operations related to account management and settings.</p>"},{"location":"reference/account/#account-manager-class","title":"Account Manager Class","text":""},{"location":"reference/account/#notedx_sdk.account.account_manager.AccountManager","title":"notedx_sdk.account.account_manager.AccountManager","text":"<pre><code>AccountManager(client: NoteDxClient)\n</code></pre> <p>Handles account management operations for the NoteDx API.</p> <p>This class provides methods for:</p> <ul> <li>Account information retrieval and updates</li> <li>Account lifecycle management</li> </ul> Note <p>Most methods in this class require Firebase authentication (email/password). API key authentication is not supported for account management operations. Account creation is handled by NoteDxClient.create_account().</p> Example <pre><code>from notedx_sdk import NoteDxClient\n\n# Initialize with email/password\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Get account info\naccount_info = client.account.get_account()\nprint(f\"Company: {account_info['company_name']}\")\n\n# Update account\nresult = client.account.update_account(\n    company_name=\"New Company Name\",\n    contact_email=\"new@email.com\"\n)\n</code></pre> <p>Initialize the account manager.</p> PARAMETER  DESCRIPTION <code>client</code> <p>The parent NoteDxClient instance</p> <p> TYPE: <code>NoteDxClient</code> </p>"},{"location":"reference/account/#notedx_sdk.account.account_manager.AccountManager-functions","title":"Functions","text":""},{"location":"reference/account/#notedx_sdk.account.account_manager.AccountManager.get_account","title":"get_account","text":"<pre><code>get_account() -&gt; Dict[str, Any]\n</code></pre> <p>Get current account information and settings.</p> <pre><code>GET /user/account/info\n</code></pre> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>company_name: Company or organization name</li> </ul> <code>Dict[str, Any]</code> <ul> <li>contact_email: Primary contact email</li> </ul> <code>Dict[str, Any]</code> <ul> <li>phone_number: Contact phone number</li> </ul> <code>Dict[str, Any]</code> <ul> <li>address: Business address</li> </ul> <code>Dict[str, Any]</code> <ul> <li>account_status: Current account status ('active', 'inactive', 'cancelled')</li> </ul> <code>Dict[str, Any]</code> <ul> <li>created_at: Account creation timestamp (ISO format)</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If Firebase authentication is not available</p> <code>AuthorizationError</code> <p>If not authorized to access this data</p> <code>NotFoundError</code> <p>If user not found</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>account_info = client.account.get_account()\nprint(f\"Account Status: {account_info['account_status']}\")\n</code></pre>"},{"location":"reference/account/#notedx_sdk.account.account_manager.AccountManager.update_account","title":"update_account","text":"<pre><code>update_account(\n    company_name: Optional[str] = None,\n    contact_email: Optional[str] = None,\n    phone_number: Optional[str] = None,\n    address: Optional[str] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Update account information and settings.</p> <pre><code>POST /user/account/update\n</code></pre> PARAMETER  DESCRIPTION <code>company_name</code> <p>New company or organization name</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>contact_email</code> <p>New contact email address</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>phone_number</code> <p>New contact phone number</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>address</code> <p>New business address</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: \"Account information updated successfully\"</li> </ul> <code>Dict[str, Any]</code> <ul> <li>updated_fields: List of fields that were updated</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If Firebase authentication is not available</p> <code>AuthorizationError</code> <p>If not authorized to update account</p> <code>BadRequestError</code> <p>If invalid JSON format in request</p> <code>InvalidFieldError</code> <p>If no valid fields provided to update</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>result = client.account.update_account(\n    company_name=\"New Corp\",\n    contact_email=\"contact@newcorp.com\"\n)\nprint(f\"Updated fields: {result['updated_fields']}\")\n</code></pre>"},{"location":"reference/account/#notedx_sdk.account.account_manager.AccountManager.cancel_account","title":"cancel_account","text":"<pre><code>cancel_account() -&gt; Dict[str, Any]\n</code></pre> <p>Cancel the current account.</p> <pre><code>POST /user/cancel-account\n</code></pre> <p>This operation:</p> <ol> <li>Deactivates all live API keys</li> <li>Updates account status to 'cancelled'</li> <li>Records cancellation timestamp</li> <li>Triggers final billing process</li> </ol> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: \"Account cancelled successfully\"</li> </ul> <code>Dict[str, Any]</code> <ul> <li>user_id: Account identifier</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If Firebase authentication is not available</p> <code>AuthorizationError</code> <p>If not authorized to cancel</p> <code>NotFoundError</code> <p>If user not found</p> <code>PaymentRequiredError</code> <p>If outstanding balance exists</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>result = client.account.cancel_account()\nprint(f\"Account {result['user_id']} cancelled\")\n</code></pre>"},{"location":"reference/account/#notedx_sdk.account.account_manager.AccountManager.reactivate_account","title":"reactivate_account","text":"<pre><code>reactivate_account() -&gt; Dict[str, Any]\n</code></pre> <p>Reactivate a cancelled account.</p> <pre><code>POST /user/reactivate-account\n</code></pre> <p>This operation:</p> <ol> <li>Verifies account is in 'cancelled' state</li> <li>Checks for unpaid bills</li> <li>Sets account status to 'inactive'</li> <li>Records reactivation timestamp</li> </ol> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: \"Account reactivated successfully\"</li> </ul> <code>Dict[str, Any]</code> <ul> <li>user_id: Account identifier</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If Firebase authentication is not available</p> <code>AuthorizationError</code> <p>If not authorized to reactivate</p> <code>NotFoundError</code> <p>If user not found</p> <code>BadRequestError</code> <p>If account is not in cancelled state</p> <code>PaymentRequiredError</code> <p>If unpaid bills exist</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>result = client.account.reactivate_account()\nprint(f\"Account {result['user_id']} reactivated\")\n</code></pre> Note <ul> <li>Only cancelled accounts can be reactivated</li> <li>Account will be set to 'inactive' status</li> <li>New API keys must be created after reactivation</li> <li>Previous data remains accessible if within retention period</li> </ul>"},{"location":"reference/account/#authentication","title":"Authentication","text":"<p>Note</p> <p>All account management operations require Firebase authentication (email/password). API key authentication is not supported for these endpoints.</p>"},{"location":"reference/account/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/account/#get-account-information","title":"Get Account Information","text":"<pre><code># Initialize with Firebase auth\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Get account info\naccount_info = client.account.get_account()\nprint(f\"Company: {account_info['company_name']}\")\nprint(f\"Status: {account_info['account_status']}\")\n</code></pre>"},{"location":"reference/account/#update-account-settings","title":"Update Account Settings","text":"<pre><code># Update account information\nresult = client.account.update_account(\n    company_name=\"New Company Name\",\n    contact_email=\"new@example.com\",\n    phone_number=\"+1234567890\",\n    address=\"123 Medical Center Dr\"\n)\n</code></pre>"},{"location":"reference/account/#account-lifecycle-management","title":"Account Lifecycle Management","text":"<pre><code># Cancel account\nresult = client.account.cancel_account()\nprint(f\"Account {result['user_id']} cancelled\")\n\n# Later, reactivate account\nresult = client.account.reactivate_account()\nprint(f\"Account {result['user_id']} reactivated\")\n</code></pre>"},{"location":"reference/account/#error-handling","title":"Error Handling","text":"<pre><code>from notedx_sdk.exceptions import (\n    AuthenticationError,\n    AuthorizationError,\n    InvalidFieldError\n)\n\ntry:\n    result = client.account.update_account(\n        contact_email=\"invalid-email\"\n    )\nexcept AuthenticationError:\n    print(\"Firebase authentication required\")\nexcept AuthorizationError:\n    print(\"Not authorized to update account\")\nexcept InvalidFieldError as e:\n    print(f\"Invalid field value: {e}\")\n</code></pre>"},{"location":"reference/account/#rest-api-equivalent","title":"REST API Equivalent","text":"<pre><code># Get account info\ncurl \"https://api.notedx.io/v1/user/account/info\" \\\n     -H \"Authorization: Bearer your-firebase-token\"\n\n# Update account\ncurl -X POST \"https://api.notedx.io/v1/user/account/update\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"company_name\": \"New Company Name\",\n       \"contact_email\": \"new@example.com\"\n     }'\n\n# Cancel account\ncurl -X POST \"https://api.notedx.io/v1/user/cancel-account\" \\\n     -H \"Authorization: Bearer your-firebase-token\"\n\n# Reactivate account\ncurl -X POST \"https://api.notedx.io/v1/user/reactivate-account\" \\\n     -H \"Authorization: Bearer your-firebase-token\"\n</code></pre>"},{"location":"reference/api-keys/","title":"API Key Management","text":"<p>The <code>KeyManager</code> class handles all operations related to API key creation and management.</p>"},{"location":"reference/api-keys/#key-manager-class","title":"Key Manager Class","text":""},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager","title":"notedx_sdk.api_keys.key_manager.KeyManager","text":"<pre><code>KeyManager(client: NoteDxClient)\n</code></pre> <p>Handles API key management operations for the NoteDx API.</p> <p>This class provides methods for:</p> <ul> <li>Creating and listing API keys</li> <li>Managing key metadata</li> <li>Updating key status</li> <li>Key deletion</li> </ul> <p>Initialize the key manager.</p> PARAMETER  DESCRIPTION <code>client</code> <p>The parent NoteDxClient instance</p> <p> TYPE: <code>NoteDxClient</code> </p>"},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager-functions","title":"Functions","text":""},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager.list_api_keys","title":"list_api_keys","text":"<pre><code>list_api_keys(\n    show_full: bool = False,\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>List all API keys associated with the account.</p> <pre><code>GET /user/list-api-keys\n</code></pre> PARAMETER  DESCRIPTION <code>show_full</code> <p>If True, returns unmasked API keys. Default False for security.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of dicts, each containing:</p> <code>List[Dict[str, Any]]</code> <ul> <li>key: API key value (masked unless show_full=True)</li> </ul> <code>List[Dict[str, Any]]</code> <ul> <li>type: Key type ('sandbox' or 'live')</li> </ul> <code>List[Dict[str, Any]]</code> <ul> <li>status: Current status ('active' or 'inactive')</li> </ul> <code>List[Dict[str, Any]]</code> <ul> <li>created_at: Creation timestamp (ISO format)</li> </ul> <code>List[Dict[str, Any]]</code> <ul> <li>last_used: Last usage timestamp (ISO format)</li> </ul> <code>List[Dict[str, Any]]</code> <ul> <li>metadata: Key metadata (only for live keys)</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If authentication fails or missing user ID</p> <code>AuthorizationError</code> <p>If not authorized to list keys</p> <code>NetworkError</code> <p>If connection issues occur</p> Note <ul> <li>Keys are sorted with sandbox first, then live keys</li> <li>Masked keys show only last 4 characters</li> <li>Metadata is only present for live keys</li> </ul>"},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager.create_api_key","title":"create_api_key","text":"<pre><code>create_api_key(\n    key_type: Literal[\"sandbox\", \"live\"],\n    metadata: Optional[Dict[str, str]] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new API key.</p> <pre><code>POST /user/create-api-key\n</code></pre> PARAMETER  DESCRIPTION <code>key_type</code> <p>Type of key to create ('sandbox' or 'live')</p> <p> TYPE: <code>Literal['sandbox', 'live']</code> </p> <code>metadata</code> <p>Optional metadata for live keys      Must be dict of string key-value pairs      Keys &lt;= 50 chars, values &lt;= 200 chars      Cannot contain sensitive keywords</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>api_key: The full API key value</li> </ul> <code>Dict[str, Any]</code> <ul> <li>key_type: Type of key created</li> </ul> <code>Dict[str, Any]</code> <ul> <li>metadata: Provided metadata (live keys only)</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If authentication fails or missing user ID</p> <code>AuthorizationError</code> <p>If not authorized to create keys</p> <code>BadRequestError</code> <p>If invalid JSON format in request</p> <code>ValidationError</code> <p>If key_type or metadata is invalid</p> <code>PaymentRequiredError</code> <p>If account has payment issues</p> <code>NetworkError</code> <p>If connection issues occur</p> Note <ul> <li>Only one sandbox key allowed per account, unlimited requests with it. Does not use AI, for testing only.</li> <li>Metadata only supported for live keys</li> <li>Cannot create live keys if account is cancelled</li> <li>First live key activates the account</li> </ul>"},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager.update_metadata","title":"update_metadata","text":"<pre><code>update_metadata(\n    api_key: str, metadata: Dict[str, str]\n) -&gt; Dict[str, Any]\n</code></pre> <p>Update metadata for a live API key.</p> <pre><code>POST /user/update-api-key-metadata\n</code></pre> PARAMETER  DESCRIPTION <code>api_key</code> <p>The API key to update</p> <p> TYPE: <code>str</code> </p> <code>metadata</code> <p>New metadata dictionary      Must be dict of string key-value pairs      Keys &lt;= 50 chars, values &lt;= 200 chars      Cannot contain sensitive keywords</p> <p> TYPE: <code>Dict[str, str]</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: \"API key metadata updated successfully\"</li> </ul> <code>Dict[str, Any]</code> <ul> <li>api_key: Updated key identifier</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If authentication fails or missing user ID</p> <code>AuthorizationError</code> <p>If not authorized to modify key</p> <code>BadRequestError</code> <p>If invalid JSON format in request</p> <code>ValidationError</code> <p>If metadata format is invalid</p> <code>NotFoundError</code> <p>If API key not found</p> <code>NetworkError</code> <p>If connection issues occur</p> Note <ul> <li>Only works with live keys</li> <li>Completely replaces existing metadata</li> <li>Sensitive keywords not allowed in metadata</li> </ul>"},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager.update_status","title":"update_status","text":"<pre><code>update_status(\n    api_key: str, status: Literal[\"active\", \"inactive\"]\n) -&gt; Dict[str, Any]\n</code></pre> <p>Update API key status.</p> <pre><code>POST /user/api-keys/{api_key}/status\n</code></pre> PARAMETER  DESCRIPTION <code>api_key</code> <p>The API key to update</p> <p> TYPE: <code>str</code> </p> <code>status</code> <p>New status ('active' or 'inactive')</p> <p> TYPE: <code>Literal['active', 'inactive']</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: \"API key status updated successfully\"</li> </ul> <code>Dict[str, Any]</code> <ul> <li>api_key: Updated key identifier</li> </ul> <code>Dict[str, Any]</code> <ul> <li>status: New status value</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If authentication fails or missing user ID</p> <code>AuthorizationError</code> <p>If not authorized to modify key</p> <code>BadRequestError</code> <p>If invalid JSON format in request</p> <code>ValidationError</code> <p>If status value is invalid</p> <code>NotFoundError</code> <p>If API key not found</p> <code>NetworkError</code> <p>If connection issues occur</p> Note <ul> <li>Deactivated keys will stop working immediately</li> <li>Status change is permanent until changed again</li> </ul>"},{"location":"reference/api-keys/#notedx_sdk.api_keys.key_manager.KeyManager.delete_api_key","title":"delete_api_key","text":"<pre><code>delete_api_key(api_key: str) -&gt; Dict[str, Any]\n</code></pre> <p>Delete an API key.</p> <pre><code>POST /user/delete-api-key\n</code></pre> PARAMETER  DESCRIPTION <code>api_key</code> <p>The API key to delete</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: \"API key deleted successfully\"</li> </ul> <code>Dict[str, Any]</code> <ul> <li>api_key: Deleted key identifier</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If authentication fails or missing user ID</p> <code>AuthorizationError</code> <p>If not authorized to delete key</p> <code>BadRequestError</code> <p>If invalid JSON format in request</p> <code>NotFoundError</code> <p>If API key not found</p> <code>NetworkError</code> <p>If connection issues occur</p> Note <ul> <li>Action cannot be undone</li> <li>Key stops working immediately</li> <li>Last live key deletion sets account to inactive</li> <li>Deleted keys remain visible in listings (inactive)</li> </ul>"},{"location":"reference/api-keys/#authentication","title":"Authentication","text":"<p>Note</p> <p>All API key management operations require Firebase authentication (email/password). API key authentication is not supported for these endpoints.</p>"},{"location":"reference/api-keys/#key-types","title":"Key Types","text":"<p>The SDK supports two types of API keys:</p> <ul> <li><code>sandbox</code>: For testing and development</li> <li>Limited rate limits</li> <li>No billing</li> <li>One per account</li> <li><code>live</code>: For production use</li> <li>Higher rate limits</li> <li>Production billing</li> <li>Multiple keys allowed</li> </ul>"},{"location":"reference/api-keys/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/api-keys/#list-api-keys","title":"List API Keys","text":"<pre><code># Initialize with Firebase auth\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# List all keys (masked by default)\nkeys = client.keys.list_api_keys()\nfor key in keys:\n    print(f\"Key: {key['key']}\")\n    print(f\"Type: {key['type']}\")\n    print(f\"Status: {key['status']}\")\n\n# List with full (unmasked) keys\nfull_keys = client.keys.list_api_keys(show_full=True)\n</code></pre>"},{"location":"reference/api-keys/#create-api-keys","title":"Create API Keys","text":"<pre><code># Create sandbox key\nsandbox = client.keys.create_api_key(key_type=\"sandbox\")\nprint(f\"Sandbox key: {sandbox['api_key']}\")\n\n# Create live key with metadata\nlive = client.keys.create_api_key(\n    key_type=\"live\",\n    metadata={\n        \"environment\": \"production\",\n        \"department\": \"radiology\",\n        \"purpose\": \"note-generation\"\n    }\n)\nprint(f\"Live key: {live['api_key']}\")\n</code></pre>"},{"location":"reference/api-keys/#manage-api-keys","title":"Manage API Keys","text":"<pre><code># Update metadata\nclient.keys.update_metadata(\n    api_key=\"live_abc123\",\n    metadata={\"environment\": \"staging\"}\n)\n\n# Update status (activate/deactivate)\nclient.keys.update_status(\n    api_key=\"live_abc123\",\n    status=\"inactive\"\n)\n\n# Delete key\nclient.keys.delete_api_key(\"live_abc123\")\n</code></pre>"},{"location":"reference/api-keys/#error-handling","title":"Error Handling","text":"<pre><code>from notedx_sdk.exceptions import (\n    AuthenticationError,\n    AuthorizationError,\n    ValidationError\n)\n\ntry:\n    result = client.keys.create_api_key(\n        key_type=\"invalid-type\"\n    )\nexcept AuthenticationError:\n    print(\"Firebase authentication required\")\nexcept AuthorizationError:\n    print(\"Not authorized to manage keys\")\nexcept ValidationError as e:\n    print(f\"Invalid parameters: {e}\")\n</code></pre>"},{"location":"reference/api-keys/#rest-api-equivalent","title":"REST API Equivalent","text":"<pre><code># List API keys\ncurl \"https://api.notedx.io/v1/user/list-api-keys\" \\\n     -H \"Authorization: Bearer your-firebase-token\"\n\n# Create API key\ncurl -X POST \"https://api.notedx.io/v1/user/create-api-key\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"keyType\": \"live\",\n       \"metadata\": {\n         \"environment\": \"production\"\n       }\n     }'\n\n# Update metadata\ncurl -X POST \"https://api.notedx.io/v1/user/update-api-key-metadata\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"apiKey\": \"live_abc123\",\n       \"metadata\": {\n         \"environment\": \"staging\"\n       }\n     }'\n\n# Update status\ncurl -X POST \"https://api.notedx.io/v1/user/api-keys/live_abc123/status\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"status\": \"inactive\"\n     }'\n\n# Delete key\ncurl -X POST \"https://api.notedx.io/v1/user/delete-api-key\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"apiKey\": \"live_abc123\"\n     }'\n</code></pre>"},{"location":"reference/client/","title":"Client Reference","text":"<p>The <code>NoteDxClient</code> is the main entry point for interacting with the NoteDx API.</p>"},{"location":"reference/client/#client-class","title":"Client Class","text":""},{"location":"reference/client/#notedx_sdk.client.NoteDxClient","title":"notedx_sdk.client.NoteDxClient","text":"<pre><code>NoteDxClient(\n    email: Optional[str] = None,\n    password: Optional[str] = None,\n    api_key: Optional[str] = None,\n    auto_login: bool = True,\n    session: Optional[requests.Session] = None,\n)\n</code></pre> <p>A Pythonic client for the NoteDx API that provides a robust interface for medical note generation.</p> <p>This client wraps the NoteDx API endpoints, providing comprehensive functionality for medical note generation and account management. It handles authentication, environment configuration, and resource management with robust error handling.</p> Features <ul> <li>Account creation and management</li> <li>Authentication handling (Firebase email/password and API key)</li> <li>Environment configuration</li> <li>Type-safe interfaces</li> <li>Comprehensive error handling</li> <li>Resource management</li> </ul> PARAMETER  DESCRIPTION <code>email</code> <p>Email for authentication. If not provided, reads from NOTEDX_EMAIL env var.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>password</code> <p>Password for authentication. If not provided, reads from NOTEDX_PASSWORD env var.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>api_key</code> <p>API key for authentication. If not provided, reads from NOTEDX_API_KEY env var.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>auto_login</code> <p>If True, automatically logs in when credentials are provided. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>session</code> <p>Custom requests.Session for advanced configuration.</p> <p> TYPE: <code>Session</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValidationError</code> <p>If the base_url is invalid</p> <code>AuthenticationError</code> <p>If credentials are invalid or missing</p> <code>NetworkError</code> <p>If unable to connect to the API</p> <code>InternalServerError</code> <p>If server error occurs during initialization</p> Example <pre><code># Create a new account\nresult = NoteDxClient.account.create_account(\n    email=\"user@example.com\",\n    password=\"secure-password\",\n    company_name=\"Medical Center Inc.\"\n)\nprint(f\"Sandbox API Key: {result['sandbox_api_key']}\")\n\n# Using email/password authentication\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"password123\"\n)\n# Client automatically logs in\nprint(client.account.get_account())\n\n# Using API key authentication\nclient = NoteDxClient(api_key=\"your-api-key\")\n# Process an audio file\nresponse = client.notes.process_audio(\n    file_path=\"recording.mp3\",\n    template=\"primaryCare\"\n)\n</code></pre> Notes <ul> <li>The session parameter allows for custom SSL, proxy, and timeout configuration</li> <li>Auto-login can be disabled if you want to handle authentication manually</li> <li>Each account starts with 100 free jobs (live API key)</li> <li>Sandbox API keys have unlimited usage for testing</li> </ul> <p>Initialize the NoteDx API client.</p> <p>The client can be initialized with:</p> <ol> <li>Email and password for account access (using Firebase Auth)</li> <li>API key for note generation only</li> <li>Both email/password and API key for full account access and note generation</li> <li>No credentials (will read from environment variables)</li> </ol> PARAMETER  DESCRIPTION <code>email</code> <p>Email for authentication. If not provided, reads from NOTEDX_EMAIL env var</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>password</code> <p>Password for authentication. If not provided, reads from NOTEDX_PASSWORD env var</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>api_key</code> <p>API key for authentication. If not provided, reads from NOTEDX_API_KEY env var</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_login</code> <p>If True, automatically logs in when credentials are provided</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>session</code> <p>Optional custom requests.Session for advanced configuration</p> <p> TYPE: <code>Optional[Session]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValidationError</code> <p>If the base_url is invalid</p> <code>AuthenticationError</code> <p>If credentials are invalid or missing</p> <code>NetworkError</code> <p>If unable to connect to the API</p> <code>InternalServerError</code> <p>If server error occurs during initialization</p> Note <ul> <li>The session parameter allows for custom SSL, proxy, and timeout configuration</li> <li>Auto-login can be disabled if you want to handle authentication manually</li> </ul>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient-functions","title":"Functions","text":""},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.configure_logging","title":"configure_logging  <code>classmethod</code>","text":"<pre><code>configure_logging(\n    level: int = logging.INFO,\n    handler: Optional[logging.Handler] = None,\n    format_string: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Configure logging for the NoteDx SDK.</p> <p>This method allows customization of logging behavior, including log level, custom handlers, and format strings.</p> PARAMETER  DESCRIPTION <code>level</code> <p>The logging level (e.g., logging.DEBUG, logging.INFO). Defaults to logging.INFO.</p> <p> TYPE: <code>int</code> DEFAULT: <code>INFO</code> </p> <code>handler</code> <p>Custom logging handler. If None, logs to console.</p> <p> TYPE: <code>Handler</code> DEFAULT: <code>None</code> </p> <code>format_string</code> <p>Custom format string for log messages. Defaults to '%(asctime)s - %(name)s - %(levelname)s - %(message)s'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> Example <pre><code>Enable debug logging to console:\n&gt;&gt;&gt; NoteDxClient.configure_logging(logging.DEBUG)\n\nLog to a file with custom format:\n&gt;&gt;&gt; file_handler = logging.FileHandler('notedx.log')\n&gt;&gt;&gt; NoteDxClient.configure_logging(\n...     level=logging.INFO,\n...     handler=file_handler,\n...     format_string='%(asctime)s - %(message)s'\n... )\n</code></pre>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.set_log_level","title":"set_log_level  <code>classmethod</code>","text":"<pre><code>set_log_level(level: int) -&gt; None\n</code></pre> <p>Set the logging level for the NoteDx SDK.</p> <p>A convenience method to quickly change just the log level without reconfiguring the entire logging setup.</p> PARAMETER  DESCRIPTION <code>level</code> <p>The logging level to set (e.g., logging.DEBUG, logging.INFO).</p> <p> TYPE: <code>int</code> </p> Example <pre><code>&gt;&gt;&gt; NoteDxClient.set_log_level(logging.DEBUG)  # Enable debug logging\n&gt;&gt;&gt; NoteDxClient.set_log_level(logging.WARNING)  # Only log warnings and errors\n</code></pre>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.login","title":"login","text":"<pre><code>login() -&gt; Dict[str, Any]\n</code></pre> <p>Authenticate with the NoteDx API using Firebase email/password authentication.</p> <pre><code>POST /auth/login\n</code></pre> <p>This method wraps the /auth/login endpoint, handling Firebase authentication and token management. On successful login, it stores the authentication tokens for subsequent requests.</p> RETURNS DESCRIPTION <code>dict</code> <p>Authentication response containing:</p> <ul> <li>user_id (str): Firebase user ID</li> <li>email (str): User's email address</li> <li>id_token (str): Firebase ID token for API requests</li> <li>refresh_token (str): Token for refreshing authentication</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If credentials are invalid or missing</p> <code>NetworkError</code> <p>If connection fails or request times out</p> <code>NoteDxError</code> <p>For other API errors</p>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.refresh_token","title":"refresh_token","text":"<pre><code>refresh_token() -&gt; Dict[str, Any]\n</code></pre> <p>Refresh the Firebase authentication token using the current refresh token.</p> <pre><code>POST /auth/refresh\n</code></pre> <p>This method wraps the /auth/refresh endpoint, handling token refresh and rotation. It automatically updates the stored tokens on successful refresh.</p> RETURNS DESCRIPTION <code>dict</code> <p>Refresh response containing:</p> <ul> <li>id_token (str): New Firebase ID token</li> <li>refresh_token (str): New refresh token (if rotated)</li> <li>user_id (str): Firebase user ID</li> <li>email (str): User's email</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If refresh token is invalid, expired, or missing</p> <code>NetworkError</code> <p>If connection fails</p> <code>NoteDxError</code> <p>For other API errors</p> Example <pre><code>&gt;&gt;&gt; # Refresh token when needed\n&gt;&gt;&gt; try:\n...     new_tokens = client.refresh_token()\n... except AuthenticationError:\n...     # Handle token refresh failure\n...     client.login()\n</code></pre>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.set_token","title":"set_token","text":"<pre><code>set_token(\n    token: str, refresh_token: Optional[str] = None\n) -&gt; None\n</code></pre> <p>Manually set authentication tokens for the client.</p> <p>This method allows direct setting of authentication tokens, bypassing the normal login flow. Useful when you already have valid Firebase tokens from another source.</p> PARAMETER  DESCRIPTION <code>token</code> <p>Firebase ID token for API authentication</p> <p> TYPE: <code>str</code> </p> <code>refresh_token</code> <p>Firebase refresh token for token renewal</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> Example <pre><code>&gt;&gt;&gt; # Using tokens from another source\n&gt;&gt;&gt; client = NoteDxClient()\n&gt;&gt;&gt; client.set_token(\n...     token=\"firebase_id_token\",\n...     refresh_token=\"firebase_refresh_token\"\n... )\n&gt;&gt;&gt; # Now you can make authenticated requests\n&gt;&gt;&gt; account_info = client.account.get_account()\n</code></pre> Note <ul> <li>The tokens must be valid Firebase tokens</li> <li>Without a refresh_token, you won't be able to automatically refresh authentication</li> <li>Invalid tokens will cause AuthenticationError on API requests</li> </ul>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str) -&gt; None\n</code></pre> <p>Manually set an API key for the client.</p> <p>This method allows direct setting of an API key for authentication. API keys provide limited access focused on note generation endpoints.</p> PARAMETER  DESCRIPTION <code>api_key</code> <p>NoteDx API key for authentication</p> <p> TYPE: <code>str</code> </p> Example <pre><code>&gt;&gt;&gt; client = NoteDxClient()\n&gt;&gt;&gt; client.set_api_key(\"your_api_key\")\n&gt;&gt;&gt; # Now you can use note generation endpoints\n&gt;&gt;&gt; response = client.notes.process_audio(\n...     file_path=\"recording.mp3\",\n...     template=\"primaryCare\"\n... )\n</code></pre> Note <ul> <li>API keys only provide access to note generation endpoints</li> <li>For full account access, use email/password authentication</li> <li>Invalid API keys will cause AuthenticationError on API requests</li> </ul>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.change_password","title":"change_password","text":"<pre><code>change_password(\n    current_password: str, new_password: str\n) -&gt; Dict[str, Any]\n</code></pre> <p>Change the password for the currently logged in user.</p> <pre><code>POST /auth/change-password\n</code></pre> <p>This method wraps the /auth/change-password endpoint, handling password updates and token management. On successful password change, it may require re-authentication.</p> PARAMETER  DESCRIPTION <code>current_password</code> <p>Current password for verification</p> <p> TYPE: <code>str</code> </p> <code>new_password</code> <p>New password to set</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Response data containing:</p> <ul> <li>success (bool): Whether password was changed</li> <li>requires_reauth (bool): Whether re-authentication is required</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If not logged in or current password is incorrect</p> <code>BadRequestError</code> <p>If new password doesn't meet requirements</p> <code>NetworkError</code> <p>If connection fails or request times out</p> <code>NoteDxError</code> <p>For other API errors</p> Example <pre><code>&gt;&gt;&gt; client = NoteDxClient(email=\"user@example.com\", password=\"old-pass\")\n&gt;&gt;&gt; result = client.change_password(\"old-pass\", \"new-pass\")\n&gt;&gt;&gt; if result[\"requires_reauth\"]:\n...     client.login()  # Re-authenticate with new password\n</code></pre>"},{"location":"reference/client/#notedx_sdk.client.NoteDxClient.create_account","title":"create_account  <code>classmethod</code>","text":"<pre><code>create_account(\n    email: str,\n    password: str,\n    company_name: str,\n    contact_phone: Optional[str] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new NoteDx account.</p> <pre><code>POST /auth/create-account\n</code></pre> <p>This operation:</p> <ol> <li>Creates a new user account</li> <li>Generates sandbox and live API keys</li> <li>Sends email verification link</li> <li>Sets up initial account settings</li> </ol> PARAMETER  DESCRIPTION <code>email</code> <p>Email address for the account</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p>Account password (must be at least 8 characters)</p> <p> TYPE: <code>str</code> </p> <code>company_name</code> <p>Company or organization name</p> <p> TYPE: <code>str</code> </p> <code>contact_phone</code> <p>Optional contact phone number</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing:</p> <code>Dict[str, Any]</code> <ul> <li>message: Success message from the API</li> </ul> <code>Dict[str, Any]</code> <ul> <li>user_id: Created account identifier</li> </ul> <code>Dict[str, Any]</code> <ul> <li>sandbox_api_key: API key for testing (unlimited usage)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>live_api_key: API key for production (includes free trial)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>requires_verification: True (email verification required)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>next_steps: List of steps to complete setup</li> </ul> RAISES DESCRIPTION <code>BadRequestError</code> <p>If required fields are missing or invalid</p> <code>InvalidFieldError</code> <p>If email format is invalid</p> <code>ConflictError</code> <p>If email is already registered</p> <code>NetworkError</code> <p>If connection issues occur</p>"},{"location":"reference/client/#authentication","title":"Authentication","text":"<p>The client supports two authentication methods:</p>"},{"location":"reference/client/#api-key-authentication","title":"API Key Authentication","text":"<pre><code>client = NoteDxClient(api_key=\"your-api-key\")\n</code></pre> <p>API keys provide access to the core features around transcription and note generation.</p>"},{"location":"reference/client/#firebase-authentication","title":"Firebase Authentication","text":"<pre><code>client = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n</code></pre> <p>Firebase authentication provides access to account management and API key operations.</p>"},{"location":"reference/client/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/client/#basic-setup","title":"Basic Setup","text":"<pre><code>from notedx_sdk import NoteDxClient\n\n# Initialize with API key\nclient = NoteDxClient(api_key=\"your-api-key\")\n\n# Or with Firebase auth - not for production\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Or both\nclient = NoteDxClient(\n    api_key=\"your-api-key\",\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n</code></pre>"},{"location":"reference/client/#accessing-managers","title":"Accessing Managers","text":"<p>The client provides access to various managers for different API functionalities:</p> <pre><code># Note generation\nclient.notes.process_audio(...)\n\n# Account management\nclient.account.get_account()\n\n# API key management\nclient.keys.list_api_keys()\n\n# Webhook management\nclient.webhooks.get_webhook_settings()\n</code></pre>"},{"location":"reference/client/#error-handling","title":"Error Handling","text":"<pre><code>from notedx_sdk.exceptions import AuthenticationError, NetworkError\n\ntry:\n    client = NoteDxClient(api_key=\"invalid-key\")\n    client.notes.process_audio(...)\nexcept AuthenticationError:\n    print(\"Invalid API key\")\nexcept NetworkError as e:\n    print(f\"Connection error: {e}\")\n</code></pre>"},{"location":"reference/client/#rest-api-equivalent","title":"REST API Equivalent","text":"<pre><code># API Key Authentication\ncurl -X POST \"https://api.notedx.io/v1/process-audio\" \\\n     -H \"x-api-key: your-api-key\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n        \"template\": \"primaryCare\", \n        \"visit_type\": \"followUp\", \n        \"recording_type\": \"dictation\", \n        \"lang\":\"en\"\n        }'\n\n# Firebase Authentication\ncurl -X POST \"https://api.notedx.io/v1/user/account/info\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\"\n</code></pre>"},{"location":"reference/notes/","title":"Note Generation","text":"<p>The <code>NoteManager</code> class handles all operations related to generating medical notes from audio recordings.</p>"},{"location":"reference/notes/#note-manager-class","title":"Note Manager Class","text":""},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager","title":"notedx_sdk.core.note_manager.NoteManager","text":"<pre><code>NoteManager(client: NoteDxClient)\n</code></pre> <p>Manages medical note generation from audio files using the NoteDx API.</p> <p>This class provides a high-level interface for:</p> <ul> <li>Converting audio recordings to medical notes</li> <li>Managing note generation jobs</li> <li>Retrieving generated notes and transcripts</li> <li>Monitoring system status</li> </ul> <p>The NoteManager handles all API authentication and error handling, making it easy to integrate medical note generation into your application.</p> Example <pre><code>&gt;&gt;&gt; from notedx_sdk import NoteDxClient\n&gt;&gt;&gt; client = NoteDxClient(api_key=\"your-api-key\")\n&gt;&gt;&gt; note_manager = client.notes\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Generate a medical note from an audio file\n&gt;&gt;&gt; response = note_manager.process_audio(\n...     file_path=\"patient_visit.mp3\",\n...     visit_type=\"initialEncounter\",\n...     recording_type=\"dictation\",\n...     template=\"primaryCare\"\n... )\n&gt;&gt;&gt; job_id = response[\"job_id\"]\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Check status and get the note when ready\n&gt;&gt;&gt; status = note_manager.fetch_status(job_id)\n&gt;&gt;&gt; if status[\"status\"] == \"completed\":\n...     note = note_manager.fetch_note(job_id)\n...     print(note[\"note\"])\n</code></pre> <p>Initialize the NoteManager.</p> PARAMETER  DESCRIPTION <code>client</code> <p>The NoteDxClient instance.</p> <p> TYPE: <code>NoteDxClient</code> </p>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager-functions","title":"Functions","text":""},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.set_logger","title":"set_logger","text":"<pre><code>set_logger(\n    level: Union[int, str],\n    handler: Optional[Handler] = None,\n) -&gt; None\n</code></pre> <p>Set the logger level and handler.</p> PARAMETER  DESCRIPTION <code>level</code> <p>The logging level (e.g., logging.INFO).</p> <p> TYPE: <code>Union[int, str]</code> </p> <code>handler</code> <p>Optional logging handler.</p> <p> TYPE: <code>Optional[Handler]</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.configure_logging","title":"configure_logging  <code>classmethod</code>","text":"<pre><code>configure_logging(\n    level: Union[int, str] = logging.INFO,\n    handler: Optional[Handler] = None,\n) -&gt; None\n</code></pre> <p>Configure logging for the SDK.</p> PARAMETER  DESCRIPTION <code>level</code> <p>The logging level (e.g., logging.DEBUG, logging.INFO)</p> <p> TYPE: <code>Union[int, str]</code> DEFAULT: <code>INFO</code> </p> <code>handler</code> <p>Optional logging handler to add. If None, logs to console.</p> <p> TYPE: <code>Optional[Handler]</code> DEFAULT: <code>None</code> </p> Example <pre><code>&gt;&gt;&gt; # Enable debug logging to console\n&gt;&gt;&gt; NoteManager.configure_logging(logging.DEBUG)\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Log to a file\n&gt;&gt;&gt; file_handler = logging.FileHandler('notedx.log')\n&gt;&gt;&gt; NoteManager.configure_logging(logging.INFO, file_handler)\n</code></pre>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.process_audio","title":"process_audio","text":"<pre><code>process_audio(\n    file_path: str,\n    visit_type: Optional[\n        Literal[\"initialEncounter\", \"followUp\"]\n    ] = None,\n    recording_type: Optional[\n        Literal[\"dictation\", \"conversation\"]\n    ] = None,\n    patient_consent: Optional[bool] = None,\n    lang: Literal[\"en\", \"fr\"] = \"en\",\n    output_language: Optional[Literal[\"en\", \"fr\"]] = None,\n    template: Optional[\n        Literal[\n            \"primaryCare\",\n            \"er\",\n            \"psychiatry\",\n            \"surgicalSpecialties\",\n            \"medicalSpecialties\",\n            \"nursing\",\n            \"radiology\",\n            \"procedures\",\n            \"letter\",\n            \"pharmacy\",\n            \"social\",\n            \"wfw\",\n            \"smartInsert\",\n        ]\n    ] = None,\n    documentation_style: Optional[\n        Literal[\"soap\", \"problemBased\"]\n    ] = None,\n    custom: Optional[Dict[str, Any]] = None,\n    chunk_size: Optional[int] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Converts an audio recording into a medical note using the specified template.</p> <pre><code>POST /process-audio\n</code></pre> <p>This method handles the complete flow of audio processing and note generation:</p> <ol> <li>Validates the audio file format and parameters</li> <li>Securely uploads the file</li> <li>Initiates the note generation process</li> <li>Returns a job ID for tracking progress</li> </ol> PARAMETER  DESCRIPTION <code>file_path</code> <p>Path to the audio file. Supported formats: <code>.mp3</code>, <code>.mp4</code>, <code>.m4a</code>, <code>.aac</code>, <code>.wav</code>, <code>.flac</code>, <code>.pcm</code>, <code>.ogg</code>, <code>.opus</code>, <code>.webm</code></p> <p> TYPE: <code>str</code> </p> <code>visit_type</code> <p>Type of medical visit (optional). * <code>initialEncounter</code>: First visit with patient * <code>followUp</code>: Subsequent visit Required for standard templates, optional for 'wfw'/'smartInsert'.</p> <p> TYPE: <code>Optional[Literal['initialEncounter', 'followUp']]</code> DEFAULT: <code>None</code> </p> <code>recording_type</code> <p>Type of audio recording (optional). * <code>dictation</code>: Single speaker dictation * <code>conversation</code>: Multi-speaker conversation (requires patient_consent) Required for standard templates, optional for 'wfw'/'smartInsert'.</p> <p> TYPE: <code>Optional[Literal['dictation', 'conversation']]</code> DEFAULT: <code>None</code> </p> <code>patient_consent</code> <p>Whether patient consent was obtained (optional). Required for conversation mode, optional otherwise.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>lang</code> <p>Source language of the audio. Defaults to 'en'. * <code>en</code>: English * <code>fr</code>: French</p> <p> TYPE: <code>Literal['en', 'fr']</code> DEFAULT: <code>'en'</code> </p> <code>output_language</code> <p>Target language for the note (optional). If not specified, uses the same language as the source.</p> <p> TYPE: <code>Optional[Literal['en', 'fr']]</code> DEFAULT: <code>None</code> </p> <code>template</code> <p>Medical note template to use. The template determines how the audio content will be structured in the final note.</p> <p> TYPE: <code>Optional[Literal['primaryCare', 'er', 'psychiatry', 'surgicalSpecialties', 'medicalSpecialties', 'nursing', 'radiology', 'procedures', 'letter', 'pharmacy', 'social', 'wfw', 'smartInsert']]</code> DEFAULT: <code>None</code> </p> <code>documentation_style</code> <p>Style of the documentation (optional).</p> <ul> <li><code>soap</code>: The classic SOAP note style</li> <li><code>problemBased</code>: Problem based documentation style, where each problem is a section of the note</li> </ul> <p> TYPE: <code>Optional[Literal['soap', 'problemBased']]</code> DEFAULT: <code>None</code> </p> Note <ul> <li>If left empty, the default documentation style of the template is used, i.e. <code>structured</code> </li> <li>Common sections are: Identification, Chief complaint, Past medical and surgical history, Past investigations, Medication and allergies, Lifestyle habits, Family history, Social history, HPI, Physical exam, Assessment, Plan.</li> </ul> <p>Standard templates (require visit_type and recording_type):</p> <ul> <li><code>primaryCare</code> - Primary care visit for a general practitioner</li> <li><code>er</code> - Emergency room visit</li> <li><code>psychiatry</code> - Psychiatric evaluation</li> <li><code>surgicalSpecialties</code> - Surgical specialties (Any)</li> <li><code>medicalSpecialties</code> - Medical specialties (Any)</li> <li><code>nursing</code> - Nursing notes </li> <li><code>pharmacy</code> - Pharmacy notes</li> <li><code>radiology</code> - Radiology reports</li> <li><code>procedures</code> - Procedure notes (small procedures, biopsies, outpatient surgeries, etc.)</li> <li><code>letter</code> - Medical letter to the referring physician</li> <li><code>social</code> - Social worker notes</li> </ul> <p>Special templates (only require file_path and lang):</p> <ul> <li><code>wfw</code> - Word for word transcription, supports inclusion of formatting and punctuation during dictation</li> <li><code>smartInsert</code> - Smart insertion mode</li> </ul> <p>custom: Additional parameters for note generation (optional).     Dictionary that can contain:</p> <pre><code>* `context`: Additional patient context (history, demographics, medication, etc.)\n* `template`: A complete custom template as a string (SOAP note, other etc...)\n</code></pre> <p>chunk_size: Size of upload chunks in bytes (optional).     Defaults to 1MB. Adjust for large files or slow connections.</p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing:</p> <ul> <li><code>job_id</code>: Unique identifier for tracking the job</li> <li><code>presigned_url</code>: URL for uploading the audio file</li> <li><code>status</code>: Initial job status</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>ValidationError</code> <p>If parameters are invalid or missing</p> <code>UploadError</code> <p>If file upload fails</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code>PaymentRequiredError</code> <p>If:</p> <ul> <li>Free trial jobs are depleted (100 jobs limit)</li> <li>Payment is required for subscription</li> <li>Account has exceeded usage limits</li> </ul> <code>AuthorizationError</code> <p>If API key lacks permissions</p> <code>InactiveAccountError</code> <p>If account is inactive or pending setup</p> <code>NetworkError</code> <p>If connection issues occur</p> <code>BadRequestError</code> <p>If API rejects the request</p> <code>InternalServerError</code> <p>If server error occurs</p> <p>Examples:</p> <p>Standard template usage: <pre><code>response = note_manager.process_audio(\n    file_path=\"visit.mp3\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\",\n    template=\"primaryCare\"\n)\njob_id = response[\"job_id\"]\n</code></pre></p> <p>Word-for-word transcription: <pre><code>response = note_manager.process_audio(\n    file_path=\"dictation.mp3\",\n    lang=\"en\",\n    template=\"wfw\"\n)\n</code></pre></p> Notes <p>The <code>custom</code> object provides powerful customization capabilities:</p> <ul> <li>It accepts a dictionary with <code>context</code> and <code>template</code> keys (both must be strings)</li> <li>The <code>template</code> value replaces the default note template</li> <li> <p>Example custom object: <pre><code>custom = {\n    \"context\": \"Past medical history: ACL tear 10 years ago on the right knee.\",\n    \"template\": '''A new custom SOAP note template.\n\n    IDENTIFICATION AND CHIEF COMPLAINT:\n    - Include the patient's identification and chief complaint here.\n\n    PAST MEDICAL HISTORY:\n    - Include the patient's past medical history here and past investigations.\n\n    SUBJECTIVE: \n    - Include the patient's subjective information here. Order by system. (Do not repeat the same information in the Identification and Chief complaint, Past medical history and Past investigations sections)\n\n    OBJECTIVE: \n    - Include the patient's objective information here.\n\n    ASSESSMENT: \n    - Include the patient's assessment here.\n\n    PLAN: \n    - Include the patient's plan here.'''\n}\n</code></pre></p> </li> <li> <p>You can create multiple custom templates and pass them in the <code>custom</code> object.</p> </li> <li>The custom object can be used in <code>regenerate_note()</code> to generate new notes from existing transcripts</li> <li>The <code>context</code> key adds patient information not in the audio recording</li> <li><code>smartInsert</code> mode allows adding text snippets within a note (e.g., \"Include a normal right knee exam\")</li> </ul> Note <ul> <li>Each language need its own custom template if you want the note to be generated accurately.</li> <li>For example, if you pass a custom template in english, but use <code>lang</code> and <code>output_language</code> as french, the note will be generated in french but the custom template but the sections might be in english.</li> <li>Free trial users get 100 jobs before requiring payment</li> <li>Job processing typically takes 20-30 seconds</li> <li>Maximum file size is 500MB</li> </ul>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.regenerate_note","title":"regenerate_note","text":"<pre><code>regenerate_note(\n    job_id: str,\n    template: Optional[\n        Literal[\n            \"primaryCare\",\n            \"er\",\n            \"psychiatry\",\n            \"surgicalSpecialties\",\n            \"medicalSpecialties\",\n            \"nursing\",\n            \"radiology\",\n            \"procedures\",\n            \"letter\",\n            \"social\",\n            \"wfw\",\n            \"smartInsert\",\n        ]\n    ] = None,\n    output_language: Optional[Literal[\"en\", \"fr\"]] = None,\n    documentation_style: Optional[\n        Literal[\"soap\", \"problemBased\"]\n    ] = None,\n    custom: Optional[Dict[str, Any]] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Generates a new medical note from an existing transcript with different parameters.</p> <pre><code>POST /regenerate-note\n</code></pre> <p>This method allows you to:</p> <ul> <li>Generate a new note using a different template</li> <li>Translate the note to another language</li> <li>Modify generation parameters without re-uploading audio</li> </ul> PARAMETER  DESCRIPTION <code>job_id</code> <p>ID of the original job to regenerate from. Must be a completed job with a transcript.</p> <p> TYPE: <code>str</code> </p> <code>template</code> <p>New template to use for generation. See process_audio() for available templates. If not specified, uses the original template.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>output_language</code> <p>Target language for the new note:</p> <ul> <li>'en': English</li> <li>'fr': French If not specified, uses the original language.</li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>custom</code> <p>Additional parameters for note generation:</p> <ul> <li>context: Additional patient context (history, demographics, medication, etc.)</li> <li>template: A complete custom template as a string (SOAP note, other etc...)</li> </ul> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>documentation_style</code> <p>Style of the documentation (optional):</p> <ul> <li>'soap': The classic SOAP note style</li> <li>'problemBased': Problem based documentation style</li> </ul> <p> TYPE: <code>Optional[Literal['soap', 'problemBased']]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing:</p> <ul> <li>job_id (str): New job ID for the regenerated note</li> <li>status (str): Initial job status</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>ValidationError</code> <p>If job_id is invalid</p> <code>JobNotFoundError</code> <p>If source job is not found</p> <code>JobError</code> <p>If source job has no transcript or had errors</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code>PaymentRequiredError</code> <p>If account payment is required</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>&gt;&gt;&gt; # First, get original job_id from process_audio\n&gt;&gt;&gt; response = note_manager.regenerate_note(\n...     job_id=\"original-job-id\",\n...     template=\"er\",  # Change template\n...     output_language=\"fr\"  # Translate to French\n... )\n&gt;&gt;&gt; new_job_id = response[\"job_id\"]\n&gt;&gt;&gt; # Use new_job_id to fetch regenerated note\n</code></pre>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.fetch_status","title":"fetch_status","text":"<pre><code>fetch_status(job_id: str) -&gt; Dict[str, Any]\n</code></pre> <p>Gets the current status and progress of a note generation job.</p> <pre><code>GET /status/{job_id}\n</code></pre> <p>The job can be in one of these states:</p> <ul> <li>'pending': Job created, waiting for file upload</li> <li>'queued': File uploaded, waiting for processing</li> <li>'transcribing': Audio file is being transcribed</li> <li>'transcribed': Transcript ready, generating note</li> <li>'completed': Note generation finished successfully</li> <li>'error': Job failed with an error</li> </ul> PARAMETER  DESCRIPTION <code>job_id</code> <p>The ID of the job to check. Obtained from process_audio() or regenerate_note().</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing:</p> <ul> <li>status (str): Current job status (see states above)</li> <li>message (str, optional): Status message or error details</li> <li>progress (dict, optional): Progress information</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>JobNotFoundError</code> <p>If job_id is not found</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>&gt;&gt;&gt; status = note_manager.fetch_status(\"job-id\")\n&gt;&gt;&gt; if status[\"status\"] == \"completed\":\n...     note = note_manager.fetch_note(\"job-id\")\n&gt;&gt;&gt; elif status[\"status\"] == \"error\":\n...     print(f\"Error: {status['message']}\")\n</code></pre> Note <ul> <li>Poll at least 5 seconds apart if you chose this method. Webhooks are HIGHLY recommended.</li> <li>The full Job typically complete within 20-30 seconds.</li> <li>Status history is preserved for 48 hours</li> </ul>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.fetch_note","title":"fetch_note","text":"<pre><code>fetch_note(job_id: str) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves the generated medical note for a completed job.</p> <pre><code>GET /fetch-note/{job_id}\n</code></pre> <p>The note includes:</p> <ul> <li>Patient consent statement (if applicable)</li> <li>Structured medical note based on template</li> <li>Optional note title</li> <li>Source/target language information</li> </ul> PARAMETER  DESCRIPTION <code>job_id</code> <p>The ID of the job to fetch the note for. Job must be in 'completed' status.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing:</p> <ul> <li>note (str): The generated medical note text</li> <li>note_title (str, optional): Title for the note</li> <li>job_id (str): The job ID (for reference)</li> <li>status (str): Job status (should be 'completed')</li> <li>lang (str): Source language of the transcript</li> <li>output_language (str): Target language for the note</li> <li>recording_type (str): Type of recording (dictation/conversation)</li> <li>visit_type (str): Type of visit (initialEncounter/followUp)</li> <li>template (str): Template used for generation</li> <li>is_sandbox (bool): Whether this is a sandbox job</li> <li>timestamp (str): Job creation timestamp</li> <li>ttl (int): Time-to-live in seconds for the job data</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>ValidationError</code> <p>If job_id is invalid</p> <code>JobNotFoundError</code> <p>If job or note is not found</p> <code>JobError</code> <p>If note generation is not completed</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>&gt;&gt;&gt; # First check status\n&gt;&gt;&gt; status = note_manager.fetch_status(\"job-id\")\n&gt;&gt;&gt; if status[\"status\"] == \"completed\":\n...     result = note_manager.fetch_note(\"job-id\")\n...     print(f\"Title: {result['note_title']}\")\n...     print(f\"Note: {result['note']}\")\n</code></pre> Note <ul> <li>Always check job status before fetching note</li> <li>Notes are available for 48 hours after completion</li> <li>Notes include patient consent if provided</li> <li>The note format follows the selected template</li> </ul>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.fetch_transcript","title":"fetch_transcript","text":"<pre><code>fetch_transcript(job_id: str) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves the raw transcript for a job after audio processing.</p> <pre><code>GET /fetch-transcript/{job_id}\n</code></pre> <p>The transcript represents the raw text from audio processing, before any medical note generation. Useful for:</p> <ul> <li>Verifying audio processing accuracy</li> <li>Debugging note generation issues</li> <li>Keeping raw transcripts for records</li> </ul> PARAMETER  DESCRIPTION <code>job_id</code> <p>The ID of the job to fetch the transcript for. Job must be in 'transcribed' or 'completed' status.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing:</p> <ul> <li>transcript (str): The raw transcript text</li> <li>job_id (str): The job ID (for reference)</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>ValidationError</code> <p>If job_id is invalid</p> <code>JobNotFoundError</code> <p>If job or transcript is not found</p> <code>JobError</code> <p>If transcription is not completed</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code>NetworkError</code> <p>If connection issues occur</p> Example <pre><code>&gt;&gt;&gt; # Useful for verification\n&gt;&gt;&gt; transcript = note_manager.fetch_transcript(\"job-id\")\n&gt;&gt;&gt; print(f\"Raw text: {transcript['transcript']}\")\n</code></pre> Note <ul> <li>Available after transcription, before note generation</li> <li>Preserved for 48 hours after job completion</li> <li>Includes all recognized speech from audio</li> <li>May contain speaker labels in conversation mode</li> </ul>"},{"location":"reference/notes/#notedx_sdk.core.note_manager.NoteManager.get_system_status","title":"get_system_status","text":"<pre><code>get_system_status() -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves system status and health information.</p> <pre><code>GET /system/status\n</code></pre> <p>Useful for:</p> <ul> <li>Monitoring API availability</li> <li>Checking processing latencies</li> <li>Debugging connection issues</li> </ul> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing:</p> <ul> <li>status (str): Overall system status</li> <li>services (dict): Status of individual services</li> <li>latency (dict): Current processing latencies</li> </ul> <p> TYPE: <code>Dict[str, Any]</code> </p> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If API key is invalid</p> <code>NetworkError</code> <p>If connection issues occur</p> <code>ServiceUnavailableError</code> <p>If status check fails</p> Example <pre><code>&gt;&gt;&gt; status = note_manager.get_system_status()\n&gt;&gt;&gt; print(f\"System status: {status['status']}\")\n&gt;&gt;&gt; print(f\"Average latency: {status['latency']['avg']}ms\")\n</code></pre> Note <ul> <li>Updated every minute</li> <li>Includes all system components</li> <li>Useful for monitoring and debugging</li> <li>No authentication required</li> </ul>"},{"location":"reference/notes/#templates","title":"Templates","text":"<p>The SDK supports various medical note templates:</p> <ul> <li><code>primaryCare</code>: Primary care visit notes</li> <li><code>er</code>: Emergency room visit notes</li> <li><code>psychiatry</code>: Psychiatric evaluation notes</li> <li><code>surgicalSpecialties</code>: Surgical specialties notes</li> <li><code>medicalSpecialties</code>: Medical specialties notes</li> <li><code>nursing</code>: Nursing notes</li> <li><code>radiology</code>: Radiology reports</li> <li><code>procedures</code>: Procedure notes</li> <li><code>letter</code>: Medical letters</li> <li><code>social</code>: Social worker notes</li> <li><code>wfw</code>: Word-for-word transcription</li> <li><code>smartInsert</code>: Smart insertion mode</li> </ul>"},{"location":"reference/notes/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/notes/#basic-note-generation","title":"Basic Note Generation","text":"<pre><code># Initialize client\nclient = NoteDxClient(api_key=\"your-api-key\")\n\n# Step 1: Process audio request - get job_id and upload URL\nresponse = client.notes.process_audio(\n    template=\"primaryCare\",\n    visit_type=\"initialEncounter\",\n    recording_type=\"dictation\",\n    lang=\"en\"\n)\n\n# Get job ID and presigned URL\njob_id = response[\"job_id\"]\npresigned_url = response[\"presigned_url\"]\n\n# Step 2: Upload the audio file using presigned URL\nclient.notes.upload_audio(\n    presigned_url=presigned_url,\n    file_path=\"visit_recording.mp3\"\n)\n\n# Step 3: Check status until complete\nwhile True:\n    status = client.notes.fetch_status(job_id)\n    if status[\"status\"] == \"completed\":\n        # Step 4: Get the note\n        note = client.notes.fetch_note(job_id)\n        print(note[\"note\"])\n        break\n    elif status[\"status\"] == \"error\":\n        print(f\"Error: {status['message']}\")\n        break\n    time.sleep(5)  # Wait 5 seconds before checking again\n</code></pre>"},{"location":"reference/notes/#word-for-word-transcription","title":"Word-for-Word Transcription","text":"<pre><code># Get job_id and upload URL\nresponse = client.notes.process_audio(\n    template=\"wfw\",\n    lang=\"en\"\n)\n\n# Upload the audio file\nclient.notes.upload_audio(\n    presigned_url=response[\"presigned_url\"],\n    file_path=\"dictation.mp3\"\n)\n</code></pre>"},{"location":"reference/notes/#note-regeneration","title":"Note Regeneration","text":"<pre><code># Regenerate with different template\nnew_response = client.notes.regenerate_note(\n    job_id=\"original-job-id\",\n    template=\"er\"\n)\n\n# Translate to French\ntranslated = client.notes.regenerate_note(\n    job_id=\"original-job-id\",\n    output_language=\"fr\"\n)\n</code></pre>"},{"location":"reference/notes/#error-handling","title":"Error Handling","text":"<pre><code>from notedx_sdk.exceptions import ValidationError, JobError\n\ntry:\n    response = client.notes.process_audio(\n        file_path=\"recording.mp3\",\n        template=\"invalid-template\"\n    )\nexcept ValidationError as e:\n    print(f\"Invalid parameters: {e}\")\nexcept JobError as e:\n    print(f\"Job failed: {e}\")\n</code></pre>"},{"location":"reference/notes/#rest-api-equivalent","title":"REST API Equivalent","text":"<pre><code># Step 1: Initialize processing and get upload URL\ncurl -X POST \"https://api.notedx.io/v1/process-audio\" \\\n     -H \"x-api-key: your-api-key\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"template\": \"primaryCare\",\n       \"visit_type\": \"initialEncounter\",\n       \"recording_type\": \"dictation\",\n       \"lang\": \"en\"\n     }'\n\n# Response contains job_id and presigned_url\n\n# Step 2: Upload audio file using presigned URL\ncurl -X PUT \"${presigned_url}\" \\\n     -H \"Content-Type: audio/mpeg\" \\\n     --data-binary \"@recording.mp3\"\n\n# Step 3: Check processing status\ncurl \"https://api.notedx.io/v1/status/{job_id}\" \\\n     -H \"x-api-key: your-api-key\"\n\n# Step 4: Get the generated note\ncurl \"https://api.notedx.io/v1/fetch-note/{job_id}\" \\\n     -H \"x-api-key: your-api-key\"\n</code></pre>"},{"location":"reference/webhooks/","title":"Webhook Management","text":"<p>The <code>WebhookManager</code> class handles all operations related to webhook configuration and management.</p>"},{"location":"reference/webhooks/#webhook-manager-class","title":"Webhook Manager Class","text":""},{"location":"reference/webhooks/#notedx_sdk.webhooks.webhook_manager.WebhookManager","title":"notedx_sdk.webhooks.webhook_manager.WebhookManager","text":"<pre><code>WebhookManager(client: NoteDxClient)\n</code></pre> <p>Handles webhook configuration and management for the NoteDx API.</p> <p>This class provides methods for configuring and managing webhook endpoints for both development and production environments. Webhooks enable real-time notifications for events like note generation completion, errors, and billing updates.</p> Features <ul> <li>Separate dev/prod webhook URLs</li> <li>HTTPS enforcement for production</li> <li>URL validation and security checks</li> <li>Real-time event notifications</li> </ul> Notes <ul> <li>All methods in this class require Firebase authentication (email/password)</li> <li>API key authentication is not supported for webhook management</li> </ul> Example <pre><code>from notedx_sdk import NoteDxClient\n\n# Initialize with email/password\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Get current webhook settings\nsettings = client.webhooks.get_webhook_settings()\nprint(f\"Dev webhook: {settings['webhook_dev']}\")\nprint(f\"Prod webhook: {settings['webhook_prod']}\")\n\n# Update webhook URLs\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"http://dev.example.com/webhook\",\n    webhook_prod=\"https://prod.example.com/webhook\"\n)\n</code></pre> <p>Initialize the webhook manager.</p> PARAMETER  DESCRIPTION <code>client</code> <p>The parent NoteDxClient instance</p> <p> TYPE: <code>NoteDxClient</code> </p>"},{"location":"reference/webhooks/#notedx_sdk.webhooks.webhook_manager.WebhookManager-functions","title":"Functions","text":""},{"location":"reference/webhooks/#notedx_sdk.webhooks.webhook_manager.WebhookManager.get_webhook_settings","title":"get_webhook_settings","text":"<pre><code>get_webhook_settings() -&gt; Dict[str, Any]\n</code></pre> <p>Retrieve current webhook configuration settings.</p> <pre><code>GET /user/webhook\n</code></pre> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: Current webhook configuration containing:</p> <ul> <li>webhook_dev (str): Development webhook URL or None if not set</li> <li>webhook_prod (str): Production webhook URL or None if not set</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If Firebase authentication is not available</p> <code>AuthorizationError</code> <p>If not authorized to view webhooks</p> <code>NetworkError</code> <p>If connection issues occur</p> <code>NoteDxError</code> <p>For other API errors</p> Example <pre><code># Get current webhook configuration\nsettings = client.webhooks.get_webhook_settings()\n\nif settings['webhook_dev']:\n    print(f\"Dev webhook: {settings['webhook_dev']}\")\nelse:\n    print(\"No development webhook configured\")\n\nif settings['webhook_prod']:\n    print(f\"Prod webhook: {settings['webhook_prod']}\")\nelse:\n    print(\"No production webhook configured\")\n</code></pre>"},{"location":"reference/webhooks/#notedx_sdk.webhooks.webhook_manager.WebhookManager.update_webhook_settings","title":"update_webhook_settings","text":"<pre><code>update_webhook_settings(\n    webhook_dev: Optional[str] = None,\n    webhook_prod: Optional[str] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Update webhook configuration for development and/or production environments.</p> <pre><code>POST /user/webhook\n</code></pre> <p>Configure URLs where NoteDx will send event notifications. Supports separate URLs for development and production environments with different security requirements.</p> PARAMETER  DESCRIPTION <code>webhook_dev</code> <p>Development environment webhook URL.</p> <ul> <li>Can use HTTP or HTTPS protocol</li> <li>Set to empty string to remove</li> <li>Must be valid URL format</li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>webhook_prod</code> <p>Production environment webhook URL.</p> <ul> <li>Must use HTTPS protocol</li> <li>Set to empty string to remove</li> <li>Must be valid URL format</li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: Update confirmation containing:</p> <ul> <li>message (str): \"Webhook URLs updated successfully\"</li> <li>webhook_dev (str): New dev URL or \"unchanged\"</li> <li>webhook_prod (str): New prod URL or \"unchanged\"</li> </ul> RAISES DESCRIPTION <code>AuthenticationError</code> <p>If Firebase authentication is not available</p> <code>AuthorizationError</code> <p>If not authorized to update webhooks</p> <code>ValidationError</code> <p>If URLs are invalid or don't meet security requirements</p> <code>InvalidFieldError</code> <p>If no URLs provided to update</p> <code>NetworkError</code> <p>If connection issues occur</p> <code>NoteDxError</code> <p>For other API errors</p> Example <pre><code># Update both webhooks\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"http://dev.example.com/notedx/webhook\",\n    webhook_prod=\"https://api.example.com/notedx/webhook\"\n)\n\n# Update only development webhook\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"http://localhost:3000/webhook\"\n)\n\n# Remove development webhook\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"\"\n)\n</code></pre>"},{"location":"reference/webhooks/#authentication","title":"Authentication","text":"<p>Note</p> <p>All webhook management operations require Firebase authentication (email/password). API key authentication is not supported for these endpoints.</p>"},{"location":"reference/webhooks/#webhook-events","title":"Webhook Events","text":"<p>Webhooks can notify you about various events:</p> <ul> <li>Note generation completion</li> <li>Processing errors</li> <li>Account status changes</li> <li>Billing events</li> </ul>"},{"location":"reference/webhooks/#environment-support","title":"Environment Support","text":"<p>The SDK supports separate webhook URLs for:</p> <ul> <li>Development environment (<code>webhook_dev</code>)</li> <li>Can use HTTP or HTTPS</li> <li>Ideal for local testing</li> <li>Production environment (<code>webhook_prod</code>)</li> <li>Must use HTTPS</li> <li>For live deployments</li> </ul>"},{"location":"reference/webhooks/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/webhooks/#get-webhook-settings","title":"Get Webhook Settings","text":"<pre><code># Initialize with Firebase auth\nclient = NoteDxClient(\n    email=\"user@example.com\",\n    password=\"your-password\"\n)\n\n# Get current webhook configuration\nsettings = client.webhooks.get_webhook_settings()\nprint(f\"Dev webhook: {settings['webhook_dev']}\")\nprint(f\"Prod webhook: {settings['webhook_prod']}\")\n</code></pre>"},{"location":"reference/webhooks/#update-webhook-urls","title":"Update Webhook URLs","text":"<pre><code># Update both webhooks dev can be http or https\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"https://api-dev.example.com/webhook\",\n    webhook_prod=\"https://api.example.com/webhook\"\n)\n\n# Update only development webhook\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"https://api-dev.example.com/webhook\"\n)\n\n# Remove development webhook\nresult = client.webhooks.update_webhook_settings(\n    webhook_dev=\"\"\n)\n</code></pre>"},{"location":"reference/webhooks/#error-handling","title":"Error Handling","text":"<pre><code>from notedx_sdk.exceptions import (\n    AuthenticationError,\n    ValidationError\n)\n\ntry:\n    result = client.webhooks.update_webhook_settings(\n        webhook_prod=\"http://insecure-url.com/webhook\"  # Not HTTPS\n    )\nexcept AuthenticationError:\n    print(\"Firebase authentication required\")\nexcept ValidationError as e:\n    print(f\"Invalid webhook URL: {e}\")\n</code></pre>"},{"location":"reference/webhooks/#webhook-payload-example","title":"Webhook Payload Example","text":"<pre><code>{\n  \"event\": \"note.completed\",\n  \"job_id\": \"job_abc123\",\n  \"timestamp\": \"2024-01-23T12:34:56Z\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"note_id\": \"note_xyz789\"\n  }\n}\n</code></pre>"},{"location":"reference/webhooks/#rest-api-equivalent","title":"REST API Equivalent","text":"<pre><code># Get webhook settings\ncurl \"https://api.notedx.io/v1/user/webhook\" \\\n     -H \"Authorization: Bearer your-firebase-token\"\n\n# Update webhook URLs\ncurl -X POST \"https://api.notedx.io/v1/user/webhook\" \\\n     -H \"Authorization: Bearer your-firebase-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"webhook_dev\": \"http://localhost:3000/webhook\",\n       \"webhook_prod\": \"https://api.example.com/webhook\"\n     }'\n</code></pre>"}]}